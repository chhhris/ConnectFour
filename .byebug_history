exit
PLAYER1
exit
session[:game].currrent_player
session[:game].current_player
session[:game]
session
exit
session
exit
session
c
move_up
in_progress_board[move_up][move_left]
in_progress_board[move_up]
move_left = move_left.send(:-, 1)
move_up = move_up.send(:-, 1)
move_left
move_up
in_progress_board[move_up] && in_progress_board[move_up][move_left] && in_progress_board[move_up][move_left] == current_checker
move_left = move_left.send(:-, 1)
move_up = move_up.send(:-, 1)
counter += 1
in_progress_board[move_up] && in_progress_board[move_up][move_left] && in_progress_board[move_up][move_left] == current_checker
in_progress_board[move_down] && in_progress_board[move_down][move_left] && in_progress_board[move_down][move_left] == current_checker
move_up
move_left
y
x
move_left = x.send(:-, 1)
y
x
move_up = y.send(:-, 1)
counter = 0
count_diagonal_up_and_to_the_left
count_diagonal_down_and_to_the_right
move_right = x.send(:+, 1)
move_down = y.send(:+, 1)
y
x
count_diagonal_up_and_to_the_left
count_diagonal_down_and_to_the_right
count_diagonal_down_and_to_the_left
count_diagonal_up_and_to_the_right
counter = 0
y
x
x, y = checker_coordinates[0], checker_coordinates[1]
count_diagonal_down_and_to_the_left
count_diagonal_up_and_to_the_left
count_diagonal_down_and_to_the_right
diagonal_desc_count
diagonal_asc_count
horizontal_count
vertical_count
exit
count
exit
rows.times.map { Array.new(columns, 0) }
columns = board.columns
rows = board.rows
board.methods
board.inspect
board = session[:board]
session[:board].rows
session[:board]
session
exit
down = count_down(x, y, target)
y
x
target = 1
exit
current_board[y][x]
grid[y][x]
y
x
exit
c
num_players
num_players = 1
num_players
c
exit
current_board
self.current_board
c
self.current_board = board
current_board
self.current_board 
board
exit
current_board
exit
current_player
@current_player
